// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/device.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LinxOSDeviceService_RegisterDevice_FullMethodName      = "/linxos_device.LinxOSDeviceService/RegisterDevice"
	LinxOSDeviceService_Heartbeat_FullMethodName           = "/linxos_device.LinxOSDeviceService/Heartbeat"
	LinxOSDeviceService_VoiceSpeak_FullMethodName          = "/linxos_device.LinxOSDeviceService/VoiceSpeak"
	LinxOSDeviceService_VoiceVolume_FullMethodName         = "/linxos_device.LinxOSDeviceService/VoiceVolume"
	LinxOSDeviceService_DisplayExpression_FullMethodName   = "/linxos_device.LinxOSDeviceService/DisplayExpression"
	LinxOSDeviceService_DisplayText_FullMethodName         = "/linxos_device.LinxOSDeviceService/DisplayText"
	LinxOSDeviceService_DisplayBrightness_FullMethodName   = "/linxos_device.LinxOSDeviceService/DisplayBrightness"
	LinxOSDeviceService_LightControl_FullMethodName        = "/linxos_device.LinxOSDeviceService/LightControl"
	LinxOSDeviceService_LightMode_FullMethodName           = "/linxos_device.LinxOSDeviceService/LightMode"
	LinxOSDeviceService_AudioPlay_FullMethodName           = "/linxos_device.LinxOSDeviceService/AudioPlay"
	LinxOSDeviceService_AudioRecord_FullMethodName         = "/linxos_device.LinxOSDeviceService/AudioRecord"
	LinxOSDeviceService_AudioStop_FullMethodName           = "/linxos_device.LinxOSDeviceService/AudioStop"
	LinxOSDeviceService_SystemInfo_FullMethodName          = "/linxos_device.LinxOSDeviceService/SystemInfo"
	LinxOSDeviceService_SystemRestart_FullMethodName       = "/linxos_device.LinxOSDeviceService/SystemRestart"
	LinxOSDeviceService_SystemWifiReconnect_FullMethodName = "/linxos_device.LinxOSDeviceService/SystemWifiReconnect"
	LinxOSDeviceService_CallTool_FullMethodName            = "/linxos_device.LinxOSDeviceService/CallTool"
)

// LinxOSDeviceServiceClient is the client API for LinxOSDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LinxOS 设备服务
type LinxOSDeviceServiceClient interface {
	// 设备管理
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// 语音交互
	VoiceSpeak(ctx context.Context, in *VoiceSpeakRequest, opts ...grpc.CallOption) (*VoiceSpeakResponse, error)
	VoiceVolume(ctx context.Context, in *VoiceVolumeRequest, opts ...grpc.CallOption) (*VoiceVolumeResponse, error)
	// 显示控制
	DisplayExpression(ctx context.Context, in *DisplayExpressionRequest, opts ...grpc.CallOption) (*DisplayExpressionResponse, error)
	DisplayText(ctx context.Context, in *DisplayTextRequest, opts ...grpc.CallOption) (*DisplayTextResponse, error)
	DisplayBrightness(ctx context.Context, in *DisplayBrightnessRequest, opts ...grpc.CallOption) (*DisplayBrightnessResponse, error)
	// 灯光控制
	LightControl(ctx context.Context, in *LightControlRequest, opts ...grpc.CallOption) (*LightControlResponse, error)
	LightMode(ctx context.Context, in *LightModeRequest, opts ...grpc.CallOption) (*LightModeResponse, error)
	// 音频处理
	AudioPlay(ctx context.Context, in *AudioPlayRequest, opts ...grpc.CallOption) (*AudioPlayResponse, error)
	AudioRecord(ctx context.Context, in *AudioRecordRequest, opts ...grpc.CallOption) (*AudioRecordResponse, error)
	AudioStop(ctx context.Context, in *AudioStopRequest, opts ...grpc.CallOption) (*AudioStopResponse, error)
	// 系统管理
	SystemInfo(ctx context.Context, in *SystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error)
	SystemRestart(ctx context.Context, in *SystemRestartRequest, opts ...grpc.CallOption) (*SystemRestartResponse, error)
	SystemWifiReconnect(ctx context.Context, in *SystemWifiReconnectRequest, opts ...grpc.CallOption) (*SystemWifiReconnectResponse, error)
	// 通用工具调用
	CallTool(ctx context.Context, in *ToolCallRequest, opts ...grpc.CallOption) (*ToolCallResponse, error)
}

type linxOSDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinxOSDeviceServiceClient(cc grpc.ClientConnInterface) LinxOSDeviceServiceClient {
	return &linxOSDeviceServiceClient{cc}
}

func (c *linxOSDeviceServiceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_RegisterDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) VoiceSpeak(ctx context.Context, in *VoiceSpeakRequest, opts ...grpc.CallOption) (*VoiceSpeakResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoiceSpeakResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_VoiceSpeak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) VoiceVolume(ctx context.Context, in *VoiceVolumeRequest, opts ...grpc.CallOption) (*VoiceVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoiceVolumeResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_VoiceVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) DisplayExpression(ctx context.Context, in *DisplayExpressionRequest, opts ...grpc.CallOption) (*DisplayExpressionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisplayExpressionResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_DisplayExpression_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) DisplayText(ctx context.Context, in *DisplayTextRequest, opts ...grpc.CallOption) (*DisplayTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisplayTextResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_DisplayText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) DisplayBrightness(ctx context.Context, in *DisplayBrightnessRequest, opts ...grpc.CallOption) (*DisplayBrightnessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisplayBrightnessResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_DisplayBrightness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) LightControl(ctx context.Context, in *LightControlRequest, opts ...grpc.CallOption) (*LightControlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LightControlResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_LightControl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) LightMode(ctx context.Context, in *LightModeRequest, opts ...grpc.CallOption) (*LightModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LightModeResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_LightMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) AudioPlay(ctx context.Context, in *AudioPlayRequest, opts ...grpc.CallOption) (*AudioPlayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AudioPlayResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_AudioPlay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) AudioRecord(ctx context.Context, in *AudioRecordRequest, opts ...grpc.CallOption) (*AudioRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AudioRecordResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_AudioRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) AudioStop(ctx context.Context, in *AudioStopRequest, opts ...grpc.CallOption) (*AudioStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AudioStopResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_AudioStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) SystemInfo(ctx context.Context, in *SystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemInfoResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_SystemInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) SystemRestart(ctx context.Context, in *SystemRestartRequest, opts ...grpc.CallOption) (*SystemRestartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemRestartResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_SystemRestart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) SystemWifiReconnect(ctx context.Context, in *SystemWifiReconnectRequest, opts ...grpc.CallOption) (*SystemWifiReconnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemWifiReconnectResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_SystemWifiReconnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linxOSDeviceServiceClient) CallTool(ctx context.Context, in *ToolCallRequest, opts ...grpc.CallOption) (*ToolCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolCallResponse)
	err := c.cc.Invoke(ctx, LinxOSDeviceService_CallTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinxOSDeviceServiceServer is the server API for LinxOSDeviceService service.
// All implementations must embed UnimplementedLinxOSDeviceServiceServer
// for forward compatibility.
//
// LinxOS 设备服务
type LinxOSDeviceServiceServer interface {
	// 设备管理
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// 语音交互
	VoiceSpeak(context.Context, *VoiceSpeakRequest) (*VoiceSpeakResponse, error)
	VoiceVolume(context.Context, *VoiceVolumeRequest) (*VoiceVolumeResponse, error)
	// 显示控制
	DisplayExpression(context.Context, *DisplayExpressionRequest) (*DisplayExpressionResponse, error)
	DisplayText(context.Context, *DisplayTextRequest) (*DisplayTextResponse, error)
	DisplayBrightness(context.Context, *DisplayBrightnessRequest) (*DisplayBrightnessResponse, error)
	// 灯光控制
	LightControl(context.Context, *LightControlRequest) (*LightControlResponse, error)
	LightMode(context.Context, *LightModeRequest) (*LightModeResponse, error)
	// 音频处理
	AudioPlay(context.Context, *AudioPlayRequest) (*AudioPlayResponse, error)
	AudioRecord(context.Context, *AudioRecordRequest) (*AudioRecordResponse, error)
	AudioStop(context.Context, *AudioStopRequest) (*AudioStopResponse, error)
	// 系统管理
	SystemInfo(context.Context, *SystemInfoRequest) (*SystemInfoResponse, error)
	SystemRestart(context.Context, *SystemRestartRequest) (*SystemRestartResponse, error)
	SystemWifiReconnect(context.Context, *SystemWifiReconnectRequest) (*SystemWifiReconnectResponse, error)
	// 通用工具调用
	CallTool(context.Context, *ToolCallRequest) (*ToolCallResponse, error)
	mustEmbedUnimplementedLinxOSDeviceServiceServer()
}

// UnimplementedLinxOSDeviceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLinxOSDeviceServiceServer struct{}

func (UnimplementedLinxOSDeviceServiceServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) VoiceSpeak(context.Context, *VoiceSpeakRequest) (*VoiceSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceSpeak not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) VoiceVolume(context.Context, *VoiceVolumeRequest) (*VoiceVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceVolume not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) DisplayExpression(context.Context, *DisplayExpressionRequest) (*DisplayExpressionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisplayExpression not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) DisplayText(context.Context, *DisplayTextRequest) (*DisplayTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisplayText not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) DisplayBrightness(context.Context, *DisplayBrightnessRequest) (*DisplayBrightnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisplayBrightness not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) LightControl(context.Context, *LightControlRequest) (*LightControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LightControl not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) LightMode(context.Context, *LightModeRequest) (*LightModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LightMode not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) AudioPlay(context.Context, *AudioPlayRequest) (*AudioPlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AudioPlay not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) AudioRecord(context.Context, *AudioRecordRequest) (*AudioRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AudioRecord not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) AudioStop(context.Context, *AudioStopRequest) (*AudioStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AudioStop not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) SystemInfo(context.Context, *SystemInfoRequest) (*SystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) SystemRestart(context.Context, *SystemRestartRequest) (*SystemRestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemRestart not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) SystemWifiReconnect(context.Context, *SystemWifiReconnectRequest) (*SystemWifiReconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemWifiReconnect not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) CallTool(context.Context, *ToolCallRequest) (*ToolCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallTool not implemented")
}
func (UnimplementedLinxOSDeviceServiceServer) mustEmbedUnimplementedLinxOSDeviceServiceServer() {}
func (UnimplementedLinxOSDeviceServiceServer) testEmbeddedByValue()                             {}

// UnsafeLinxOSDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinxOSDeviceServiceServer will
// result in compilation errors.
type UnsafeLinxOSDeviceServiceServer interface {
	mustEmbedUnimplementedLinxOSDeviceServiceServer()
}

func RegisterLinxOSDeviceServiceServer(s grpc.ServiceRegistrar, srv LinxOSDeviceServiceServer) {
	// If the following call pancis, it indicates UnimplementedLinxOSDeviceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LinxOSDeviceService_ServiceDesc, srv)
}

func _LinxOSDeviceService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_VoiceSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).VoiceSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_VoiceSpeak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).VoiceSpeak(ctx, req.(*VoiceSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_VoiceVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).VoiceVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_VoiceVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).VoiceVolume(ctx, req.(*VoiceVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_DisplayExpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayExpressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).DisplayExpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_DisplayExpression_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).DisplayExpression(ctx, req.(*DisplayExpressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_DisplayText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).DisplayText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_DisplayText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).DisplayText(ctx, req.(*DisplayTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_DisplayBrightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayBrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).DisplayBrightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_DisplayBrightness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).DisplayBrightness(ctx, req.(*DisplayBrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_LightControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).LightControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_LightControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).LightControl(ctx, req.(*LightControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_LightMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).LightMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_LightMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).LightMode(ctx, req.(*LightModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_AudioPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioPlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).AudioPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_AudioPlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).AudioPlay(ctx, req.(*AudioPlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_AudioRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).AudioRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_AudioRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).AudioRecord(ctx, req.(*AudioRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_AudioStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).AudioStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_AudioStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).AudioStop(ctx, req.(*AudioStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_SystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).SystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_SystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).SystemInfo(ctx, req.(*SystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_SystemRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).SystemRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_SystemRestart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).SystemRestart(ctx, req.(*SystemRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_SystemWifiReconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemWifiReconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).SystemWifiReconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_SystemWifiReconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).SystemWifiReconnect(ctx, req.(*SystemWifiReconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinxOSDeviceService_CallTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinxOSDeviceServiceServer).CallTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinxOSDeviceService_CallTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinxOSDeviceServiceServer).CallTool(ctx, req.(*ToolCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinxOSDeviceService_ServiceDesc is the grpc.ServiceDesc for LinxOSDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinxOSDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linxos_device.LinxOSDeviceService",
	HandlerType: (*LinxOSDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _LinxOSDeviceService_RegisterDevice_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _LinxOSDeviceService_Heartbeat_Handler,
		},
		{
			MethodName: "VoiceSpeak",
			Handler:    _LinxOSDeviceService_VoiceSpeak_Handler,
		},
		{
			MethodName: "VoiceVolume",
			Handler:    _LinxOSDeviceService_VoiceVolume_Handler,
		},
		{
			MethodName: "DisplayExpression",
			Handler:    _LinxOSDeviceService_DisplayExpression_Handler,
		},
		{
			MethodName: "DisplayText",
			Handler:    _LinxOSDeviceService_DisplayText_Handler,
		},
		{
			MethodName: "DisplayBrightness",
			Handler:    _LinxOSDeviceService_DisplayBrightness_Handler,
		},
		{
			MethodName: "LightControl",
			Handler:    _LinxOSDeviceService_LightControl_Handler,
		},
		{
			MethodName: "LightMode",
			Handler:    _LinxOSDeviceService_LightMode_Handler,
		},
		{
			MethodName: "AudioPlay",
			Handler:    _LinxOSDeviceService_AudioPlay_Handler,
		},
		{
			MethodName: "AudioRecord",
			Handler:    _LinxOSDeviceService_AudioRecord_Handler,
		},
		{
			MethodName: "AudioStop",
			Handler:    _LinxOSDeviceService_AudioStop_Handler,
		},
		{
			MethodName: "SystemInfo",
			Handler:    _LinxOSDeviceService_SystemInfo_Handler,
		},
		{
			MethodName: "SystemRestart",
			Handler:    _LinxOSDeviceService_SystemRestart_Handler,
		},
		{
			MethodName: "SystemWifiReconnect",
			Handler:    _LinxOSDeviceService_SystemWifiReconnect_Handler,
		},
		{
			MethodName: "CallTool",
			Handler:    _LinxOSDeviceService_CallTool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/device.proto",
}
