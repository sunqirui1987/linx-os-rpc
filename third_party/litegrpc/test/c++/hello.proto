/**
 * @file hello.proto
 * @brief Hello 服务的 Protocol Buffers 定义文件
 * 
 * 此文件定义了 Hello 服务的消息格式和服务接口，用于演示 LiteGRPC 的基本功能。
 * 
 * 特性：
 * - 使用 Protocol Buffers 3 语法
 * - 集成 nanopb 选项，适用于嵌入式和资源受限环境
 * - 定义简单的请求-响应模式
 * - 支持中文和多语言消息传输
 * 
 * 使用场景：
 * - gRPC 服务开发学习
 * - 客户端-服务器通信测试
 * - LiteGRPC 功能验证
 * 
 * @author LiteGRPC Team
 * @date 2024
 * @version 1.0
 */

syntax = "proto3";

package hello;

// 导入 nanopb 选项，用于限制字符串长度以适应嵌入式设备
// nanopb 是一个轻量级的 Protocol Buffers 实现，特别适用于微控制器
import "nanopb.proto";

/**
 * @brief Hello 请求消息
 * 
 * 客户端发送给服务器的请求消息，包含发送者信息和消息内容。
 * 
 * 字段说明：
 * - name: 发送者姓名，最大长度32字符（适应嵌入式环境）
 * - message: 消息内容，最大长度128字符
 * 
 * nanopb 限制说明：
 * - max_size 选项确保生成的 C 代码使用固定大小的缓冲区
 * - 有助于在内存受限的环境中预测内存使用量
 */
message HelloRequest {
    string name = 1 [(nanopb).max_size = 32];      // 发送者姓名（最大32字符）
    string message = 2 [(nanopb).max_size = 128];  // 消息内容（最大128字符）
}

/**
 * @brief Hello 响应消息
 * 
 * 服务器返回给客户端的响应消息，包含回复内容和状态码。
 * 
 * 字段说明：
 * - reply: 服务器的回复消息，最大长度256字符
 * - status: 处理状态码（0表示成功，非0表示各种错误状态）
 * 
 * 状态码约定：
 * - 0: 成功处理
 * - 1: 一般错误
 * - 2: 参数错误
 * - 3: 服务器内部错误
 */
message HelloResponse {
    string reply = 1 [(nanopb).max_size = 256];    // 回复消息（最大256字符）
    int32 status = 2;                              // 状态码（0=成功，非0=错误）
}

/**
 * @brief Hello 服务定义
 * 
 * 定义了 Hello 服务的 RPC 接口，提供基本的问候功能。
 * 
 * 服务方法：
 * - SayHello: 接收 HelloRequest，返回 HelloResponse
 * 
 * 此服务演示了：
 * - 简单的一元 RPC 调用模式
 * - 请求-响应消息处理
 * - 错误状态传递
 * - 多语言消息支持
 */
service HelloService {
    /**
     * @brief 发送问候消息
     * @param request HelloRequest 包含发送者姓名和消息内容
     * @return HelloResponse 包含服务器回复和处理状态
     * 
     * 此方法实现基本的问候功能：
     * 1. 接收客户端的问候请求
     * 2. 处理请求中的姓名和消息
     * 3. 生成个性化的回复消息
     * 4. 返回回复和处理状态
     */
    rpc SayHello(HelloRequest) returns (HelloResponse);
}